import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  SafeAreaView,
  ScrollView,
  Platform,
  AppState,
  Button,
  NativeModules,
  Linking,
  Modal,
} from 'react-native';
import { StatusBar } from 'react-native';
import authService from '../services/authService';
import Config from 'react-native-config';
import { postLocationBatch } from '../api';
import punchService from '../services/punchService';
import geoService from '../services/geoService';
import backgroundService from '../services/backgroundService';
import cameraService from '../services/cameraService';
import fileUploadService from '../services/fileUploadService';
import deviceUtils from '../utils/deviceUtils';
import { ensureAlwaysLocationPermission, runSequentialPermissionFlow, forceShowBackgroundPermissionDialog, checkNotificationsPermissionOnAppActive, requestBackgroundLocationTwoClicks } from '../services/permissionsService';
import { canStartShift, humanizeStatus, normalizeStatus, WorkerStatus } from '../helpers/shift';
import ShiftStatusManager from '../services/shiftStatusService';
// import { initLocation } from '../location'; // –û—Ç–∫–ª—é—á–µ–Ω–æ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ App.js
// geo endpoint/test toggles removed
// DebugBgScreen and BgGeoTestScreen removed - no longer needed
import { useShiftStore, setFromServer } from '../store/shiftStore';
import { guardedAlert } from '../ui/alert';

const MainScreen = ({ onLogout }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [showAlwaysBanner, setShowAlwaysBanner] = useState(false);
  const isShiftActive = useShiftStore(s => s.isActive);
  const [currentUser, setCurrentUser] = useState(null);
  const [userStatus, setUserStatus] = useState(WorkerStatus.READY_TO_WORK);
  const currentUserIdRef = useRef(null);
  // endpoint & test toggles removed
  const [shiftStatusManager, setShiftStatusManager] = useState(null);
  const [indicators, setIndicators] = useState({ gps: false, network: false, battery: true, permission: false, notifications: true });
  const [showUserDetails, setShowUserDetails] = useState(false);
  const [shiftStart, setShiftStart] = useState(null);
  const [lastRequestAt, setLastRequestAt] = useState(null);
  const [onSite, setOnSite] = useState(null);
  const [showAccessPanel, setShowAccessPanel] = useState(false);
  const [selectedAccessKey, setSelectedAccessKey] = useState(null);
  const [showQuickMenu, setShowQuickMenu] = useState(false);
  const [monthlyRecorded, setMonthlyRecorded] = useState(null);
  const [monthlyApproved, setMonthlyApproved] = useState(null);
  const [monthlyApprovedHours, setMonthlyApprovedHours] = useState(null);
  const [monthlyAppCount, setMonthlyAppCount] = useState(null);
  const [monthlySuspicious, setMonthlySuspicious] = useState(null);
  const [monthOffset, setMonthOffset] = useState(0);
  const [menuModalVisible, setMenuModalVisible] = useState(false);
  const [accessModalVisible, setAccessModalVisible] = useState(false);
  const [showHeaderBadges, setShowHeaderBadges] = useState(false);
  // –°–µ–ª—Ñ–∏-–º–æ–¥–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º image-picker

  const captureSelfie = async () => {
    try {
      let photoResult = await cameraService.takePhoto({ cameraType: 'front' });
      if (!photoResult.success && __DEV__) {
        const galleryResult = await cameraService.selectPhoto();
        if (galleryResult.success) photoResult = galleryResult;
      }
      if (photoResult.success) {
        return {
          uri: photoResult.data?.uri,
          type: photoResult.data?.type || 'image/jpeg',
          fileName: photoResult.data?.fileName || `selfie_${Date.now()}.jpg`,
        };
      }
      return null;
    } catch {
      return null;
    }
  };
  
  // Guards –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const batteryOptimizationRequested = useRef(false);
  const locationPermissionsRequested = useRef(false);

  useEffect(() => {
    const loadUserData = async () => {
      const user = await authService.getCurrentUser();
      if (user) {
        console.log('Loaded currentUser:', user);
        setCurrentUser(user);
        currentUserIdRef.current = user.user_id;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShiftStatusManager
        const deviceId = await deviceUtils.getDeviceId();
        
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú ShiftStatusManager –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        const { DISABLE_POLLING, disabledShiftStatusManager } = require('../../disable_polling_websockets');
        const manager = DISABLE_POLLING ? disabledShiftStatusManager : new ShiftStatusManager(user.user_id || 123, deviceId);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º BGGeo –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è locationTemplate
        try {
          const { forceResetBGGeo, checkBGGeoConfig } = require('../../force_reset_bggeo');
          console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BGGeo...');
          const config = await checkBGGeoConfig();
          if (config.hasMathFloor) {
            console.log('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å...');
            await forceResetBGGeo();
          }
        } catch (e) {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ BGGeo:', e);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        manager.setStatusUpdateCallback(async (data) => {
          console.log('=== SHIFT STATUS UPDATE ===');
          console.log('Received data:', data);
          try { setFromServer(data); } catch {}
          
          const hasActiveShift = data.has_active_shift || false;
          const workerStatus = (data?.worker?.worker_status) || data?.worker_status || '–∞–∫—Ç–∏–≤–µ–Ω';

          // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –∏ "–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å" (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª)
          try {
            const activeStart = data?.active_shift?.shift_start || null;
            const lastStart = data?.last_shift?.shift_start || null;
            const s = hasActiveShift ? activeStart : (activeStart || lastStart);
            setShiftStart(s || null);
          } catch {}
          try {
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ /api/db_save/ ‚Äî –±–µ—Ä—ë–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–ø–ª–æ–∞–¥–∞, fallback –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É
            // const lrLocal = global?.__LAST_DB_SAVE_AT__ || null;
            const lrServer = data?.worker?.last_geo_timestamp || data?.last_request || null;
            // setLastRequestAt(lrLocal || lrServer || null);
             setLastRequestAt(lrServer || null);
          } catch {}
          
          setUserStatus(normalizeStatus(workerStatus));
          
          console.log('Updated state:', {
            isShiftActive: hasActiveShift,
            userStatus: workerStatus,
            activeShiftId: data?.active_shift?.id || data?.active_shift?.shift_id || null,
            sourceOfTruth: 'server'
          });
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          try {
            const { ensureTracking, stopTracking } = require('../location.js');
            if (hasActiveShift) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã, –µ—Å–ª–∏ currentUser –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
              const userId = currentUser?.user_id || data.worker?.user_id;
              if (userId) {
                await ensureTracking(userId);
                console.log('Auto-start tracking based on active shift for user:', userId);
              } else {
                console.log('Cannot start tracking: user_id is not available in currentUser or shift data');
              }
            } else {
              await stopTracking();
              console.log('Auto-stop tracking based on inactive shift');
            }
          } catch (e) {
            console.log('Tracking sync with shift status failed:', e?.message || e);
          }
        });
        
        setShiftStatusManager(manager);
      }
    };
    
    const requestLocationPermissions = async () => {
      if (locationPermissionsRequested.current) {
        console.log('Location permissions already requested, skipping...');
        return;
      }
      
      try {
        console.log('Requesting background location permission...');
        locationPermissionsRequested.current = true;
        const hasAlways = await ensureAlwaysLocationPermission();
        if (hasAlways) {
          console.log('Background location permission granted');
        } else {
          console.log('Background location permission denied');
        }
      } catch (error) {
        console.error('Error requesting location permissions:', error);
        locationPermissionsRequested.current = false; // Reset on error
      }
    };
    
    loadUserData();
    // endpoint/test toggles removed
    requestLocationPermissions();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π flow –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —ç–∫—Ä–∞–Ω (foreground-only)
    setTimeout(() => { runSequentialPermissionFlow(); }, 600);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    if (!batteryOptimizationRequested.current) {
      requestBatteryOptimization();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('Location initialization disabled in MainScreen - handled by App.js on login');
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º AppState –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ Always + fast refresh —Å –º—å—é—Ç–µ–∫—Å–æ–º
    let _refreshInflight = false;
    const safeRefresh = async (uid, reqId) => {
      if (_refreshInflight) {
        console.log('[Shift] safeRefresh: skip (inflight), reqId=', reqId);
        return;
      }
      _refreshInflight = true;
      try {
        console.log('[Shift] safeRefresh start, reqId=', reqId);
        const { refreshShiftStatusNow } = require('../services/shiftStatusService');
        await refreshShiftStatusNow(uid);
        console.log('[Shift] safeRefresh done, reqId=', reqId);
      } catch (e) {
        console.log('[Shift] safeRefresh failed, reqId=', reqId, e?.message || e);
      } finally {
        _refreshInflight = false;
      }
    };

    const sub = AppState.addEventListener('change', async (state) => {
      console.log('[AppState] MainScreen ->', state);
      if (state === 'active') {
        let uid = currentUserIdRef.current;
        if (!uid) {
          try {
            uid = (await authService.getCurrentUser())?.user_id;
            if (uid) currentUserIdRef.current = uid;
          } catch {}
        }
        if (uid) {
          const reqId = Math.random().toString(36).slice(2, 8);
          await safeRefresh(uid, reqId);
        }
        if (Platform.OS === 'android') {
          try {
            const { check, RESULTS, PERMISSIONS } = require('react-native-permissions');
            const bg = await check(PERMISSIONS.ANDROID.ACCESS_BACKGROUND_LOCATION);
            setShowAlwaysBanner(bg !== RESULTS.GRANTED);
          } catch {}
        }
      }
    });

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (shiftStatusManager) {
        shiftStatusManager.disconnect();
      }
      sub.remove();
    };
  }, []); // –£–±–∏—Ä–∞–µ–º shiftStatusManager –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: GPS / —Å–µ—Ç—å / —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ / —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  const refreshIndicators = useCallback(async () => {
    try {
      let permissionOk = false;
      try {
        const { check, RESULTS, PERMISSIONS } = require('react-native-permissions');
        if (Platform.OS === 'android') {
          const bg = await check(PERMISSIONS.ANDROID.ACCESS_BACKGROUND_LOCATION);
          const fine = await check(PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION);
          permissionOk = (bg === RESULTS.GRANTED) || (fine === RESULTS.GRANTED);
        } else {
          const always = await check(PERMISSIONS.IOS.LOCATION_ALWAYS);
          const whenInUse = await check(PERMISSIONS.IOS.LOCATION_WHEN_IN_USE);
          permissionOk = (always === RESULTS.GRANTED) || (whenInUse === RESULTS.GRANTED);
        }
      } catch {}

      let batteryOk = true;
      try {
        const { getBatteryWhitelistStatus } = require('../location.js');
        const status = await getBatteryWhitelistStatus();
        batteryOk = Platform.OS !== 'android' ? true : !!status?.ignored;
      } catch {}

      let networkOk = false;
      try {
        const net = await deviceUtils.getNetworkInfo();
        networkOk = !!net?.isConnected;
      } catch {}

      let notificationsOk = true;
      try {
        const { check, RESULTS, PERMISSIONS } = require('react-native-permissions');
        if (Platform.OS === 'android' && Platform.Version >= 33) {
          const notif = await check(PERMISSIONS.ANDROID.POST_NOTIFICATIONS);
          notificationsOk = notif === RESULTS.GRANTED;
        } else {
          notificationsOk = true;
        }
      } catch {}

      let gpsOk = false;
      try {
        gpsOk = await deviceUtils.isLocationAvailable();
      } catch {}

      setIndicators({ gps: !!gpsOk, network: !!networkOk, battery: !!batteryOk, permission: !!permissionOk, notifications: !!notificationsOk });

      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–Ω–∞ –æ–±—ä–µ–∫—Ç–µ" (–∑–∞–≥–ª—É—à–∫–∞ —á–µ—Ä–µ–∑ env: SITE_LAT, SITE_LON, SITE_RADIUS_M)
      try {
        const siteLat = parseFloat(Config.SITE_LAT);
        const siteLon = parseFloat(Config.SITE_LON);
        const siteRadius = parseFloat(Config.SITE_RADIUS_M || '150');
        if (!isNaN(siteLat) && !isNaN(siteLon) && !isNaN(siteRadius)) {
          const loc = await geoService.getCurrentLocation();
          const toRad = (d) => (d * Math.PI) / 180;
          const R = 6371000;
          const dLat = toRad((loc.latitude || 0) - siteLat);
          const dLon = toRad((loc.longitude || 0) - siteLon);
          const a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(toRad(siteLat)) * Math.cos(toRad(loc.latitude || 0)) * Math.sin(dLon/2) * Math.sin(dLon/2);
          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
          const distance = R * c;
          setOnSite(distance <= siteRadius);
        } else {
          setOnSite(null);
        }
      } catch {
        setOnSite(null);
      }
    } catch (e) {
      // fail-safe: –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º state –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
    }
  }, []);

  useEffect(() => {
    // –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å
    refreshIndicators();
    const timer = setInterval(refreshIndicators, 10000);
    return () => clearInterval(timer);
  }, [refreshIndicators]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ —Å–º–µ–Ω—ã
  // –§—É–Ω–∫—Ü–∏—è checkWorkerStatus —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ShiftStatusManager

  // –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
  const handlePunchIn = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!shiftStatusManager) {
      Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    setIsLoading(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    try {
      const currentStatus = await shiftStatusManager.getCurrentStatus();
      console.log('Current status before punch in:', currentStatus);
      
      if (currentStatus.has_active_shift) {
        Alert.alert('–°–º–µ–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞', '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞');
        setIsLoading(false);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ
      const workerStatus = (currentStatus?.worker?.worker_status) || currentStatus?.worker_status || '–∞–∫—Ç–∏–≤–µ–Ω';
      const normalized = normalizeStatus(workerStatus);
      
      if (normalized === WorkerStatus.BLOCKED) {
        Alert.alert('–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '–í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        setIsLoading(false);
        return;
      }
      
      if (normalized === WorkerStatus.FIRED) {
        Alert.alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', '–í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–æ–ª–µ–Ω.');
        setIsLoading(false);
        return;
      }
      
      if (!canStartShift(normalized)) {
        Alert.alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', '–í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.');
        setIsLoading(false);
        return;
      }
    } catch (error) {
      console.error('Error checking current status:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.');
      setIsLoading(false);
      return;
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–±—ã—Å—Ç—Ä—ã–π –ø–æ—Ç–æ–∫ –≤ 2 –∫–ª–∏–∫–∞)
    try {
      const hasAlways = await requestBackgroundLocationTwoClicks();
      if (!hasAlways) {
        Alert.alert('–§–æ–Ω–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è', '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤–∫–ª—é—á–∏—Ç–µ ¬´–†–∞–∑—Ä–µ—à–∞—Ç—å –≤—Å–µ–≥–¥–∞¬ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        setIsLoading(false);
        return;
      }
    } catch (error) {
      console.error('Error checking location permissions:', error);
      Alert.alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.');
      setIsLoading(false);
      return;
    }

    // –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç: –ø–æ–¥–Ω–∏–º–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π punch, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π FG-—Å–µ—Ä–≤–∏—Å
    let preStarted = false;
    let ensureTrackingRef = null;
    let stopTrackingRef = null;
    try {
      const loc = require('../location.js');
      ensureTrackingRef = loc.ensureTracking;
      stopTrackingRef = loc.stopTracking;
    } catch {}
    if (currentUser?.user_id && ensureTrackingRef) {
      try {
        await ensureTrackingRef(currentUser.user_id);
        preStarted = true;
      } catch (e) {
        console.log('Pre-start ensureTracking failed:', e?.message || e);
      }
    }

    try {
      // –°–µ–ª—Ñ–∏ —á–µ—Ä–µ–∑ VisionCamera
      const selfie = await captureSelfie();
      if (!selfie || !selfie.uri) {
        if (preStarted && stopTrackingRef) { try { await stopTrackingRef(); } catch {} }
        Alert.alert('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ', '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ.');
        setIsLoading(false);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const location = await geoService.getCurrentLocation();

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      console.log('Adding geo point for punch in:', location);
      const geoPoint = geoService.addGeoPoint(
        location.latitude,    // lat
        location.longitude,   // lon
        location.altitude || 0,  // alt
        (typeof location.altitude_msl === 'number' ? location.altitude_msl : (location.altitude || 0)),  // altMsl
        true,                 // hasAlt
        true,                 // hasAltMsl
        false,                // hasAltMslAccuracy
        1.5                   // mslAccuracyMeters
      );
      console.log('Added geo point for punch in:', geoPoint);

      // –ü–∞—Ä–∞–ª–ª–µ–ª–∏–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö, punch –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      const tsSec = Math.floor(Date.now() / 1000);
      const phoneImeiIn = await deviceUtils.getDeviceId();
      const photoNameIn = `punch_1_${tsSec}.jpg`;

      const uploadInPromise = fileUploadService.uploadShiftPhoto(
        {
          uri: selfie.uri,
          type: selfie.type || 'image/jpeg',
          fileName: photoNameIn,
        },
        currentUser.user_id || 123,
        phoneImeiIn,
        'start'
      ).then((res) => {
        if (!res?.success) {
          console.log('Shift start photo upload failed:', res?.error || res);
        }
        return res;
      }).catch((e) => {
        console.log('Shift start photo upload exception:', e?.message || e);
      });

      const saveGeoInPromise = geoService.saveGeoData(
        currentUser.user_id || 123,
        1,
        phoneImeiIn
      ).catch((e) => console.log('saveGeoData (in) error:', e?.message || e));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º punch –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–æ—Ç–æ –∏ timestamp
      const result = await shiftStatusManager.sendPunch(1, photoNameIn, tsSec); // 1 = –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã

      if (result.success) {
        Alert.alert('–£—Å–ø–µ—Ö', '–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã
        try {
          const { ensureTracking } = require('../location.js');
          if (currentUser?.user_id) {
            await ensureTracking(currentUser.user_id);
            console.log('Location tracking started on punch in for user:', currentUser.user_id);
          } else {
            console.log('Cannot start tracking on punch in: currentUser.user_id is not available');
          }
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º backgroundService –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
          console.log('Initializing backgroundService for punch in...');
          const phoneImei = await deviceUtils.getDeviceId();
          await backgroundService.initialize(currentUser.user_id, 1, phoneImei, __DEV__);
          console.log('BackgroundService initialized for punch in');
        } catch (e) {
          console.error('Failed to start tracking on punch in:', e?.message || e);
        }
      } else {
        if (preStarted && stopTrackingRef) { try { await stopTrackingRef(); } catch {} }
        Alert.alert('–û—à–∏–±–∫–∞', result.error);
      }

      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI –æ–∂–∏–¥–∞–Ω–∏–µ–º ‚Äî —Ñ–æ–Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
      Promise.allSettled([uploadInPromise, saveGeoInPromise]).then(() => {}).catch(() => {});
    } catch (error) {
      if (preStarted && stopTrackingRef) { try { await stopTrackingRef(); } catch {} }
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É');
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
  const handlePunchOut = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!shiftStatusManager) {
      Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    try {
      const currentStatus = await shiftStatusManager.getCurrentStatus();
      console.log('Current status before punch out:', currentStatus);
      
      if (!currentStatus.has_active_shift) {
        Alert.alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã', '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        return;
      }
    } catch (error) {
      console.error('Error checking current status:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.');
      return;
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–±—ã—Å—Ç—Ä—ã–π –ø–æ—Ç–æ–∫ –≤ 2 –∫–ª–∏–∫–∞)
    try {
      const hasAlways = await requestBackgroundLocationTwoClicks();
      if (!hasAlways) {
        Alert.alert('–§–æ–Ω–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è', '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –≤–∫–ª—é—á–∏—Ç–µ ¬´–†–∞–∑—Ä–µ—à–∞—Ç—å –≤—Å–µ–≥–¥–∞¬ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        return;
      }
    } catch (error) {
      console.error('Error checking location permissions:', error);
      Alert.alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.');
      return;
    }

    setIsLoading(true);
    try {
      // –°–µ–ª—Ñ–∏ —á–µ—Ä–µ–∑ VisionCamera
      const selfie = await captureSelfie();
      if (!selfie || !selfie.uri) {
        Alert.alert('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ', '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ.');
        setIsLoading(false);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const location = await geoService.getCurrentLocation();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      console.log('Adding geo point for punch out:', location);
      const geoPoint = geoService.addGeoPoint(
        location.latitude,    // lat
        location.longitude,   // lon
        location.altitude || 0,  // alt
        (typeof location.altitude_msl === 'number' ? location.altitude_msl : (location.altitude || 0)),  // altMsl
        true,                 // hasAlt
        true,                 // hasAltMsl
        false,                // hasAltMslAccuracy
        1.5                   // mslAccuracyMeters
      );
      console.log('Added geo point for punch out:', geoPoint);

      // –ü–∞—Ä–∞–ª–ª–µ–ª–∏–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö, punch –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      const tsSecOut = Math.floor(Date.now() / 1000);
      const phoneImeiOut = await deviceUtils.getDeviceId();
      const photoNameOut = `punch_0_${tsSecOut}.jpg`;

      const uploadOutPromise = fileUploadService.uploadShiftPhoto(
        {
          uri: selfie.uri,
          type: selfie.type || 'image/jpeg',
          fileName: photoNameOut,
        },
        currentUser.user_id || 123,
        phoneImeiOut,
        'end'
      ).then((res) => {
        if (!res?.success) {
          console.log('Shift end photo upload failed:', res?.error || res);
        }
        return res;
      }).catch((e) => {
        console.log('Shift end photo upload exception:', e?.message || e);
      });

      const saveGeoOutPromise = geoService.saveGeoData(
        currentUser.user_id || 123,
        1,
        phoneImeiOut
      ).catch((e) => console.log('saveGeoData (out) error:', e?.message || e));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º punch –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–æ—Ç–æ –∏ timestamp
      const result = await shiftStatusManager.sendPunch(0, photoNameOut, tsSecOut); // 0 = –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã

      if (result.success) {
        Alert.alert('–£—Å–ø–µ—Ö', '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã
        try {
          const { stopTracking } = require('../location.js');
          await stopTracking();
          console.log('Location tracking stopped on punch out');
        } catch (e) {
          console.error('Failed to stop tracking on punch out:', e?.message || e);
        }
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', result.error);
      }

      // –§–æ–Ω–æ–≤–∞—è –¥–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
      Promise.allSettled([uploadOutPromise, saveGeoOutPromise]).then(() => {}).catch(() => {});
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É');
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
  const saveGeoData = async () => {
    try {
      const result = await geoService.saveGeoData(
        currentUser.user_id || 123,
        1, // place_id
        await deviceUtils.getDeviceId() // –†–µ–∞–ª—å–Ω—ã–π IMEI
      );

      if (result.success) {
        Alert.alert('–£—Å–ø–µ—Ö', '–ì–µ–æ–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', result.error);
      }
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ');
    }
  };

  // (dev test functions removed)


  // –ü–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ BGGeo
  const handleShowQueuedPoints = async () => {
    try {
      const BackgroundGeolocation = require('react-native-background-geolocation');
      const BGGeo = BackgroundGeolocation.default || BackgroundGeolocation;
      const count = await BGGeo.getCount();
      Alert.alert('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏', String(count));
    } catch (e) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫');
    }
  };



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ (—Å guard)
  const requestBatteryOptimization = useCallback(async () => {
    if (batteryOptimizationRequested.current) {
      console.log('[Battery] Already requested, skipping...');
      return;
    }
    
    batteryOptimizationRequested.current = true;
    try {
      const { ensureBatteryWhitelistUI } = require('../location.js');
      await ensureBatteryWhitelistUI();
    } catch (error) {
      console.error('Error requesting battery optimization:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏');
    }
  }, []);

  // —Ç–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É–¥–∞–ª—ë–Ω

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const handleLogout = async () => {
    console.log('=== HANDLE LOGOUT CALLED ===');
    console.log('isShiftActive (store):', isShiftActive);
    console.log('currentUser:', currentUser);
    
    try {
      // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–±–µ–∑ —Å–±—Ä–æ—Å–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ)
      let effectiveActive = !!isShiftActive;
      if (!effectiveActive && currentUser?.user_id) {
        try {
          console.log('[Shift] Verifying active shift before logout...');
          const res = await punchService.getShiftStatus(currentUser.user_id);
          effectiveActive = !!res?.success && !!res.data?.has_active_shift;
          console.log('[Shift] Verify result:', effectiveActive);
        } catch (e) {
          console.log('[Shift] Verify failed, keep current store value. Reason:', e?.message || e);
        }
      }

      if (effectiveActive) {
        console.log('Showing shift interruption alert...');
        guardedAlert(
          '–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã',
          '–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ —Å–º–µ–Ω–∞. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–º–µ–Ω—É –∏ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?',
          [
            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
            {
              text: '–ü—Ä–µ—Ä–≤–∞—Ç—å —Å–º–µ–Ω—É –∏ –≤—ã–π—Ç–∏',
              style: 'destructive',
              onPress: async () => {
                try {
                  console.log('User confirmed shift interruption and logout');
                  if (currentUser && currentUser.user_id) {
                    console.log('Auto-closing shift before logout...');
                    try {
                      const { stopTracking } = require('../location.js');
                      await stopTracking();
                      console.log('Location tracking stopped before logout');
                    } catch (e) {
                      console.error('Failed to stop tracking before logout:', e?.message || e);
                    }
                    const phoneImei = await deviceUtils.getDeviceId();
                    const autoPunchResult = await punchService.autoPunchOut(currentUser.user_id, phoneImei);
                    if (autoPunchResult.success) {
                      console.log('Shift auto-closed successfully before logout');
                      Alert.alert('–°–º–µ–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞', '–°–º–µ–Ω–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞');
                    } else {
                      console.error('Failed to auto-close shift before logout:', autoPunchResult.error);
                      Alert.alert('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                    }
                  }
                  await authService.logout();
                  onLogout();
                } catch (error) {
                  console.error('Error during logout with shift closure:', error);
                  Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                }
              },
            },
          ]
        );
      } else {
        await authService.logout();
        onLogout();
      }
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  };

  const handleIndicatorPress = useCallback((kind) => {
    const openSettings = async () => {
      try { await Linking.openSettings(); } catch {}
    };
    switch (kind) {
      case 'gps':
        Alert.alert('GPS', indicators.gps ? 'GPS –≤–∫–ª—é—á–µ–Ω' : 'GPS –≤—ã–∫–ª—é—á–µ–Ω', [
          !indicators.gps ? { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', onPress: openSettings } : { text: 'OK' }
        ]);
        break;
      case 'network':
        Alert.alert('–°–µ—Ç—å', indicators.network ? '–°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', [
          !indicators.network ? { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', onPress: openSettings } : { text: 'OK' }
        ]);
        break;
      case 'battery':
        Alert.alert('–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ', indicators.battery ? '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ' : '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏ –≤–∫–ª—é—á–µ–Ω–∞', [
          !indicators.battery ? { text: '–û—Ç–∫—Ä—ã—Ç—å', onPress: requestBatteryOptimization } : { text: 'OK' }
        ]);
        break;
      case 'permission':
        Alert.alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', indicators.permission ? '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ' : '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ñ–æ–Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', [
          !indicators.permission ? { text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å', onPress: requestBackgroundLocationTwoClicks } : { text: 'OK' }
        ]);
        break;
      case 'notifications':
        Alert.alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', indicators.notifications ? '–†–∞–∑—Ä–µ—à–µ–Ω—ã' : '–ó–∞–ø—Ä–µ—â–µ–Ω—ã', [
          !indicators.notifications ? { text: '–†–∞–∑—Ä–µ—à–∏—Ç—å', onPress: checkNotificationsPermissionOnAppActive } : { text: 'OK' }
        ]);
        break;
      default:
        break;
    }
  }, [indicators, requestBatteryOptimization]);

  const displayName = currentUser
    ? [currentUser.user_lname, currentUser.user_fname, currentUser.user_mname]
        .filter(Boolean)
        .join(' ')
    : '';

  const formatIso = (iso) => {
    try {
      if (!iso) return '‚Äî';
      const d = new Date(iso);
      if (isNaN(d.getTime())) return '‚Äî';
      return d.toLocaleString();
    } catch { return '‚Äî'; }
  };

  useEffect(() => {
    const pad = (n) => (n < 10 ? `0${n}` : `${n}`);
    const getMonthRange = (offset) => {
      const now = new Date();
      const y = now.getFullYear();
      const m = now.getMonth();
      const d = new Date(y, m + offset, 1);
      const start = `${d.getFullYear()}-${pad(d.getMonth() + 1)}-01`;
      const endDate = new Date(d.getFullYear(), d.getMonth() + 1, 0).getDate();
      const end = `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(endDate)}`;
      const label = d.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
      return { start, end, label };
    };

    const fetchMonthlyStats = async () => {
      try {
        const userId = currentUser?.user_id;
        if (!userId) return;
        const { API_CONFIG } = require('../config/api');
        const { start, end } = getMonthRange(monthOffset);
        const qs = `?user_id=${userId}&from=${start}&to=${end}`;
        const res = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WORKSHIFTS}${qs}`, {
          headers: { 'Content-Type': 'application/json', 'Api-token': API_CONFIG.API_TOKEN },
        });
        if (!res.ok) return;
        const data = await res.json();
        const list = Array.isArray(data) ? data : (Array.isArray(data?.results) ? data.results : []);
        const total = list.length;
        let approved = 0;
        let approvedHours = 0;
        let appCount = 0;
        let suspicious = 0;
        const toHrs = (ms) => ms / (1000 * 60 * 60);
        for (const x of list) {
          const status = (x.status || x.shift_status || '').toString().toLowerCase();
          const isApproved = status.includes('approved') || status.includes('normal') || status.includes('—É—Ç–≤–µ—Ä–∂');
          if (isApproved) approved += 1;
          let hrs = x.shift_duration_hours || x.duration_hours || null;
          if (hrs == null && x.shift_start && x.shift_end) {
            const st = new Date(x.shift_start).getTime();
            const en = new Date(x.shift_end).getTime();
            if (!isNaN(st) && !isNaN(en) && en > st) hrs = toHrs(en - st);
          }
          if (isApproved && typeof hrs === 'number') approvedHours += hrs;
          const source = (x.source || x.submitted_via || x.created_by || '').toString().toLowerCase();
          if (source.includes('app') || source.includes('mobile')) appCount += 1;
          if (status.includes('suspicious') || status.includes('–∞–Ω–æ–º') || (typeof hrs === 'number' && hrs < 0.25)) suspicious += 1;
        }
        setMonthlyRecorded(total);
        setMonthlyApproved(approved);
        setMonthlyApprovedHours(approvedHours ? Number(approvedHours.toFixed(1)) : 0);
        setMonthlyAppCount(appCount);
        setMonthlySuspicious(suspicious);
      } catch {}
    };
    fetchMonthlyStats();
  }, [currentUser, monthOffset]);

  // –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π/—Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è badge
  const missingBadges = [];
  if (!indicators.permission) missingBadges.push({ key: 'permission', label: '–ì–µ–æ‚Äë—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', onPress: requestBackgroundLocationTwoClicks });
  if (!indicators.gps) missingBadges.push({ key: 'gps', label: 'GPS', onPress: () => Linking.openSettings().catch(() => {}) });
  if (!indicators.network) missingBadges.push({ key: 'network', label: '–°–µ—Ç—å', onPress: () => Linking.openSettings().catch(() => {}) });
  if (!indicators.battery) missingBadges.push({ key: 'battery', label: '–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ', onPress: requestBatteryOptimization });
  if (!indicators.notifications) missingBadges.push({ key: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', onPress: checkNotificationsPermissionOnAppActive });


  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.content}>
        {/* –¢—ë–º–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø–æ–¥ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–æ–º: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ safe-area –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ */}
        <View style={styles.statusBarStripAbsolute} />
        <View style={styles.statusBarSpacer} />

        <View style={styles.userHeader}>
          <View style={styles.userTopRow}>
            <View style={{ flex: 1 }}>
              <Text style={styles.userRoleTop}>{(currentUser?.worker_type || '').toLowerCase() === 'worker' ? '–†–∞–±–æ—á–∏–π' : (currentUser?.worker_type || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</Text>
              <View style={styles.nameWithBadgeRow}>
                {missingBadges.length > 0 && (
                  <TouchableOpacity onPress={() => setShowHeaderBadges(v => !v)} style={[styles.unreadBadge, { marginRight: 6 }]} accessibilityLabel="–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–∞–º–∏">
                    <Text style={styles.unreadBadgeText}>!</Text>
                  </TouchableOpacity>
                )}
                <Text style={styles.userNameTop}>{currentUser ? (displayName || '‚Äî') : '–ó–∞–≥—Ä—É–∑–∫–∞...'}</Text>
              </View>
            </View>
            <TouchableOpacity onPress={() => setMenuModalVisible(true)} accessibilityLabel="–ú–µ–Ω—é">
              <Text style={styles.kebabIcon}>‚ãÆ</Text>
            </TouchableOpacity>
          </View>
          {/* –ü–æ–∫–∞–∑ badges –¥–æ—Å—Ç—É–ø–æ–≤ –ø—Ä—è–º–æ –≤ —Ö–µ–¥–µ—Ä–µ (–ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ ! —Å–ª–µ–≤–∞ –æ—Ç –§–ò–û) */}
          {showHeaderBadges && missingBadges.length > 0 && (
            <View style={[styles.badgeRow, { paddingHorizontal: 16, marginBottom: 10 }]}>
              {missingBadges.map(b => (
                <View key={b.key} style={styles.badge}>
                  <TouchableOpacity onPress={b.onPress}>
                    <Text style={styles.badgeText}>{b.label}</Text>
                  </TouchableOpacity>
                </View>
              ))}
            </View>
          )}
        </View>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É */}

        {/* –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∫—Ä—ã—Ç—ã */}

        {/* –ë–ª–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—ë–Ω (expand —É–±—Ä–∞–Ω) */}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ badge –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç—É–ø–æ–≤ */}
        {/* Badges —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –≥–ª–∞–∑ –≤ —à–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}

        {/* –ú–æ–¥–∞–ª–∫–∞ –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏) */}
        <Modal visible={menuModalVisible} transparent animationType="none" onRequestClose={() => setMenuModalVisible(false)}>
          <View pointerEvents="box-none" style={styles.modalOverlayNoShade}>
            <TouchableOpacity style={styles.fill} activeOpacity={1} onPress={() => setMenuModalVisible(false)} />
            <View style={[styles.menuDropdown, { top: 72, right: 24 }]}
              pointerEvents="box-none">
              <TouchableOpacity style={[styles.button, styles.logoutDropdownButton]} onPress={() => { setMenuModalVisible(false); handleLogout(); }}>
                <Text style={styles.logoutDropdownLabel}>–í—ã–π—Ç–∏</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        {/* –ú–æ–¥–∞–ª–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤ (–ø–æ badge/–∑–Ω–∞—á–∫—É) */}
        <Modal visible={accessModalVisible} transparent animationType="fade" onRequestClose={() => setAccessModalVisible(false)}>
          <View style={styles.modalOverlay}>
            <View style={styles.accessPanel}>
              <View style={styles.accessHeader}>
                <Text style={styles.accessTitle}>–î–æ—Å—Ç—É–ø—ã</Text>
                <TouchableOpacity onPress={() => setAccessModalVisible(false)}>
                  <Text style={styles.accessClose}>–ó–∞–∫—Ä—ã—Ç—å</Text>
                </TouchableOpacity>
              </View>
              {[
                { key: 'permission', label: '–ì–µ–æ‚Äë—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', ok: indicators.permission, action: requestBackgroundLocationTwoClicks },
                { key: 'gps', label: 'GPS', ok: indicators.gps, action: () => Linking.openSettings().catch(() => {}) },
                { key: 'network', label: '–°–µ—Ç—å', ok: indicators.network, action: () => Linking.openSettings().catch(() => {}) },
                { key: 'battery', label: '–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ', ok: indicators.battery, action: requestBatteryOptimization },
                { key: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', ok: indicators.notifications, action: checkNotificationsPermissionOnAppActive },
              ].map(item => (
                <View key={item.key} style={styles.accessRow}>
                  <Text style={styles.accessLabel}>{item.label}</Text>
                  <View style={styles.accessRight}>
                    <Text style={[styles.accessStatus, item.ok ? styles.ok : styles.bad]}>{item.ok ? '–û–ö' : '–ù–µ—Ç'}</Text>
                    {!item.ok && (
                      <TouchableOpacity onPress={() => { item.action(); }} style={styles.accessBtn}>
                        <Text style={styles.accessBtnText}>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å</Text>
                      </TouchableOpacity>
                    )}
                  </View>
                </View>
              ))}
            </View>
          </View>
        </Modal>

        <View style={[styles.statusCard, styles.statusCardFullWidth]}>
          <View style={[styles.statusIndicator, isShiftActive ? styles.activeStatus : styles.inactiveStatus]}>
            <Text style={[
              styles.statusText,
              isShiftActive ? styles.statusTextActive : styles.statusTextInactive
            ]}>
              {isShiftActive ? '–°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞' : '–°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}
            </Text>
          </View>
          <View style={{ marginTop: 12, width: '100%' }}>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã</Text>
              <Text style={styles.detailValue}>{formatIso(shiftStart)}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å</Text>
              <Text style={styles.detailValue}>{formatIso(lastRequestAt)}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>–ù–∞ –æ–±—ä–µ–∫—Ç–µ</Text>
              <Text style={styles.detailValue}>{onSite === null ? '‚Äî' : (onSite ? '–î–∞' : '–ù–µ—Ç')}</Text>
            </View>
          </View>
          {userStatus === WorkerStatus.BLOCKED && (
            <Text style={{ color: 'crimson', fontSize: 14, marginTop: 10, textAlign: 'center', fontWeight: '600' }}>
              ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!
            </Text>
          )}

        </View>

        <View style={styles.actions}>
          {!isShiftActive ? (
            canStartShift(userStatus) ? (
              <View />
            ) : (
              <View>
                <Text style={{ color: 'crimson', textAlign: 'center', marginBottom: 10 }}>
                  {userStatus === WorkerStatus.BLOCKED
                    ? '–í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                    : '–í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–æ–ª–µ–Ω'}
                </Text>
                {userStatus === WorkerStatus.BLOCKED ? (
                  <TouchableOpacity
                    style={[styles.button, styles.punchInButton, isLoading && styles.buttonDisabled]}
                    onPress={async () => {
                      if (!currentUser) return;
                      setIsLoading(true);
                      try {
                        const res = await punchService.requestUnblock(currentUser.user_id || 123);
                        if (res.success) {
                          Alert.alert('–ì–æ—Ç–æ–≤–æ', '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                          // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ShiftStatusManager
                        } else {
                          Alert.alert(
                            '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 
                            res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
                            [
                              { text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', onPress: () => {
                                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                                setTimeout(() => {
                                  if (currentUser) {
                                    const retryUnblock = async () => {
                                      setIsLoading(true);
                                      try {
                                        const retryRes = await punchService.requestUnblock(currentUser.user_id || 123);
                                        if (retryRes.success) {
                                          Alert.alert('–ì–æ—Ç–æ–≤–æ', '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                                          // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ShiftStatusManager
                                        } else {
                                          Alert.alert('–û—à–∏–±–∫–∞', retryRes.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
                                        }
                                      } catch (e) {
                                        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
                                      } finally {
                                        setIsLoading(false);
                                      }
                                    };
                                    retryUnblock();
                                  }
                                }, 100);
                              }},
                              { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' }
                            ]
                          );
                        }
                      } catch (e) {
                        console.error('Request unblock error:', e);
                        Alert.alert(
                          '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 
                          '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
                          [
                            { text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', onPress: () => {
                              // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                              setTimeout(() => {
                                if (currentUser) {
                                  const retryUnblock = async () => {
                                    setIsLoading(true);
                                    try {
                                      const retryRes = await punchService.requestUnblock(currentUser.user_id || 123);
                                      if (retryRes.success) {
                                        Alert.alert('–ì–æ—Ç–æ–≤–æ', '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                                        // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ShiftStatusManager
                                      } else {
                                        Alert.alert('–û—à–∏–±–∫–∞', retryRes.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
                                      }
                                    } catch (e) {
                                      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
                                    } finally {
                                      setIsLoading(false);
                                    }
                                  };
                                  retryUnblock();
                                }
                              }, 100);
                            }},
                            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' }
                          ]
                        );
                      } finally {
                        setIsLoading(false);
                      }
                    }}
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <ActivityIndicator color="#fff" />
                    ) : (
                      <Text style={styles.buttonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É</Text>
                    )}
                  </TouchableOpacity>
                ) : null}
              </View>
            )
          ) : (
            <View />
          )}
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –ø–æ–¥ –±–ª–æ–∫–æ–º —Å–º–µ–Ω—ã */}
        <View style={{ marginBottom: 16 }}>
          <TouchableOpacity
            style={[styles.button, styles.queuedButton]}
            onPress={handleShowQueuedPoints}
            accessibilityLabel="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫"
          >
            <Text style={styles.buttonText}>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏</Text>
          </TouchableOpacity>
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —à–∞–ø–∫—É */}
      </ScrollView>
      {/* –°–µ–ª—Ñ–∏-–º–æ–¥–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω */}

      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã */}
      {!isShiftActive && canStartShift(userStatus) && (
        <View style={styles.fabContainer} pointerEvents={isLoading ? 'none' : 'auto'}>
          <TouchableOpacity
            style={[styles.fabButton, isLoading && styles.fabButtonDisabled]}
            onPress={handlePunchIn}
            disabled={isLoading}
            accessibilityLabel="–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
          >
            {isLoading ? (
              <ActivityIndicator color="#fff" />)
              : (<Text style={styles.fabText}>–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</Text>)}
          </TouchableOpacity>
        </View>
      )}
      {isShiftActive && (
        <View style={styles.fabContainer} pointerEvents={isLoading ? 'none' : 'auto'}>
          <TouchableOpacity
            style={[styles.fabButtonClose, isLoading && styles.fabButtonDisabled]}
            onPress={handlePunchOut}
            disabled={isLoading}
            accessibilityLabel="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
          >
            {isLoading ? (
              <ActivityIndicator color="#fff" />)
              : (<Text style={styles.fabText}>–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É</Text>)}
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  statusBarSpacer: {
    height: Platform.OS === 'ios' ? 16 : 12,
  },
  statusBarStripAbsolute: {
    position: 'absolute',
    top: -100,
    left: -1000,
    right: -1000,
    height: Platform.OS === 'ios' ? 160 : 120,
    backgroundColor: '#1f1f1f',
    zIndex: 1,
  },
  content: {
    flex: 1,
    padding: 20,
  },
  fabContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 72, // –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ç–∞–±-–±–∞—Ä–∞
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
  },
  fabButton: {
    backgroundColor: '#007AFF',
    borderRadius: 14,
    paddingVertical: 14,
    paddingHorizontal: 22,
    minWidth: 220,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 3 },
    elevation: 4,
  },
  fabButtonClose: {
    backgroundColor: '#F44336',
    borderRadius: 14,
    paddingVertical: 14,
    paddingHorizontal: 22,
    minWidth: 220,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 3 },
    elevation: 4,
  },
  fabButtonDisabled: {
    backgroundColor: '#8AB4F8',
  },
  fabText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '800',
  },
  header: {
    alignItems: 'center',
    marginTop: 12,
    marginBottom: 30,
  },
  headerArea: {
    alignItems: 'center',
    paddingTop: 76,
    paddingBottom: 12,
  },
  topBar: {
    paddingTop: 12,
    paddingBottom: 8,
    paddingHorizontal: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  userTopRow: {
    paddingTop: 16,
    paddingHorizontal: 16,
    paddingBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  userHeader: {
    marginHorizontal: -1000,
    paddingHorizontal: 1000,
    backgroundColor: '#e6eef6',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  userQuickRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingBottom: 10,
    gap: 10,
  },
  kebabIcon: {
    fontSize: 22,
    color: '#333',
    padding: 8,
  },
  metricsRow: {
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  metricsText: {
    color: '#333',
    fontSize: 14,
    fontWeight: '600',
  },
  shiftStatsCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    margin: 16,
    marginTop: 10,
    borderWidth: 1,
    borderColor: '#eee',
  },
  shiftStatsHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 14,
    paddingTop: 12,
  },
  monthLabel: {
    fontSize: 16,
    fontWeight: '700',
    color: '#333',
    textTransform: 'capitalize',
  },
  monthChevron: {
    fontSize: 28,
    color: '#333',
    paddingHorizontal: 6,
    paddingVertical: 2,
  },
  shiftStatsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    padding: 12,
    gap: 10,
  },
  statBox: {
    width: '48%',
    backgroundColor: '#f7f9fc',
    borderRadius: 10,
    padding: 12,
  },
  statLabel: {
    color: '#666',
    fontSize: 12,
    fontWeight: '700',
    marginBottom: 4,
  },
  statValue: {
    color: '#1d1d1f',
    fontSize: 18,
    fontWeight: '800',
  },
  statSub: {
    color: '#666',
    fontSize: 12,
    fontWeight: '600',
  },
  statsCardDark: {
    backgroundColor: '#1C1C1E',
    borderRadius: 16,
    marginHorizontal: 12,
    marginTop: 12,
    paddingBottom: 10,
  },
  pillRow: {
    flexDirection: 'row',
    gap: 10,
    paddingHorizontal: 12,
    paddingTop: 8,
  },
  pill: {
    backgroundColor: '#2C2C2E',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 16,
  },
  pillActive: {
    backgroundColor: '#fff',
  },
  pillText: {
    color: '#fff',
    fontWeight: '700',
  },
  pillTextActive: {
    color: '#1d1d1f',
  },
  statsAmount: {
    color: '#fff',
    fontSize: 28,
    fontWeight: '800',
    paddingHorizontal: 14,
    paddingVertical: 8,
  },
  sbList: {
    paddingHorizontal: 10,
    paddingBottom: 10,
    gap: 8,
  },
  sbItem: {
    backgroundColor: '#2C2C2E',
    borderRadius: 12,
    padding: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  sbItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  sbIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  sbIconText: { color: '#1d1d1f', fontWeight: '800' },
  sbTitle: { color: '#fff', fontWeight: '700' },
  sbSub: { color: '#98989F', fontSize: 12, fontWeight: '600' },
  sbValue: { color: '#fff', fontWeight: '800', fontSize: 16 },
  modalOverlayNoShade: {
    flex: 1,
    backgroundColor: 'transparent',
    justifyContent: 'flex-start',
    alignItems: 'flex-end',
    paddingTop: 96,
    paddingRight: 12,
  },
  fill: { flex: 1, alignSelf: 'stretch' },
  menuDropdown: {
    position: 'absolute',
    right: 12,
    backgroundColor: 'transparent',
    borderRadius: 0,
    padding: 0,
    minWidth: undefined,
    shadowColor: 'transparent',
    shadowOpacity: 0,
    shadowRadius: 0,
    shadowOffset: { width: 0, height: 0 },
    elevation: 0,
  },
  logoutDropdownButton: {
    backgroundColor: '#3A3A3C',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 14,
  },
  logoutDropdownLabel: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
    textAlign: 'right',
  },
  userMenu: {
    paddingHorizontal: 16,
    paddingBottom: 8,
  },
  userRoleTop: {
    fontSize: 14,
    color: '#666',
    fontWeight: '600',
  },
  userNameTop: {
    fontSize: 20,
    color: '#333',
    fontWeight: '800',
  },
  nameWithBadgeRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  unreadBadge: {
    width: 22,
    height: 22,
    borderRadius: 11,
    backgroundColor: '#FF9800',
    alignItems: 'center',
    justifyContent: 'center',
  },
  unreadBadgeText: {
    color: '#fff',
    fontWeight: '800',
    fontSize: 14,
    marginTop: -1,
  },
  headerRow: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 8,
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  logo: {
    width: 72,
    height: 72,
    borderRadius: 36,
    backgroundColor: '#007AFF',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  logoSmall: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#007AFF',
    alignItems: 'center',
    justifyContent: 'center',
  },
  logoLetter: {
    color: '#fff',
    fontSize: 34,
    fontWeight: '800',
  },
  logoLetterSmall: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '800',
  },
  appName: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 6,
  },
  appNameInline: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  userCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  userCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 6,
  },
  userCardTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: '#333',
  },
  userCardChevron: {
    fontSize: 16,
    color: '#666',
  },
  userName: {
    fontSize: 14,
    color: '#555',
    marginBottom: 8,
  },
  userDetails: {
    gap: 10,
    marginTop: 4,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: 10,
  },
  detailLabel: {
    flex: 1,
    color: '#333',
    fontSize: 14,
    fontWeight: '600',
  },
  detailValue: {
    marginRight: 6,
    fontWeight: '700',
  },
  ok: { color: '#2e7d32' },
  bad: { color: '#c62828' },
  statusCard: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    marginBottom: 20,
    alignItems: 'center',
  },
  statusCardFullWidth: {
    alignSelf: 'stretch',
    marginHorizontal: -20,
    borderRadius: 0,
    borderBottomLeftRadius: 12,
    borderBottomRightRadius: 12,
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0,
    paddingHorizontal: 20,
  },
  indicatorsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 8,
    marginBottom: 16,
  },
  indicatorItem: {
    flex: 1,
    paddingVertical: 8,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
  },
  indicatorOk: {
    backgroundColor: '#E8F5E9',
    borderColor: '#4CAF50',
  },
  indicatorBad: {
    backgroundColor: '#FFEBEE',
    borderColor: '#F44336',
  },
  indicatorLabel: {
    color: '#333',
    fontSize: 12,
    fontWeight: '600',
  },
  badgeRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    paddingHorizontal: 16,
    marginBottom: 12,
  },
  badge: {
    backgroundColor: '#FFF3E0',
    borderColor: '#FF9800',
    borderWidth: 1,
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 999,
  },
  badgeText: {
    color: '#7A4F00',
    fontSize: 12,
    fontWeight: '700',
  },
  accessPanel: {
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginBottom: 12,
    borderRadius: 12,
    padding: 12,
    borderWidth: 1,
    borderColor: '#eee',
  },
  accessHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  accessTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: '#333',
  },
  accessClose: {
    color: '#007AFF',
    fontWeight: '700',
    fontSize: 14,
  },
  accessRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 6,
  },
  accessLabel: {
    color: '#333',
    fontSize: 14,
    fontWeight: '600',
  },
  accessRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  accessStatus: {
    fontWeight: '700',
  },
  accessBtn: {
    backgroundColor: '#FF9800',
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 8,
  },
  accessBtnText: {
    color: '#fff',
    fontWeight: '700',
    fontSize: 12,
  },
  statusTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 15,
  },
  statusIndicator: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
  },
  activeStatus: {
    backgroundColor: 'rgba(76, 175, 80, 0.15)',
    borderWidth: 1,
    borderColor: 'rgba(76, 175, 80, 1)',
  },
  inactiveStatus: {
    backgroundColor: 'rgba(244, 67, 54, 0.15)',
    borderWidth: 1,
    borderColor: 'rgba(244, 67, 54, 1)',
  },
  statusText: {
    fontSize: 16,
    fontWeight: '600',
  },
  statusTextActive: {
    color: '#2E7D32',
  },
  statusTextInactive: {
    color: '#B71C1C',
  },
  actions: {
    marginBottom: 20,
  },
  button: {
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 15,
  },
  punchInButton: {
    backgroundColor: '#007AFF',
  },
  punchOutButton: {
    backgroundColor: '#F44336',
  },
  logoutButton: {
    backgroundColor: '#9E9E9E',
  },
  logoutTopButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: '#FFFFFF',
    paddingVertical: 12,
    paddingHorizontal: 18,
    borderRadius: 14,
    borderWidth: 0,
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 2 },
    elevation: 3,
  },
  logoutTopLabel: {
    color: '#1d1d1f',
    fontSize: 16,
    fontWeight: '700',
  },
  logoutButtonSmall: {
    backgroundColor: '#9E9E9E',
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginBottom: 0,
  },
  logoutIconBtn: {
    width: 44,
    height: 44,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#9E9E9E',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
  },
  logoutIconText: {
    color: '#9E9E9E',
    fontSize: 20,
    fontWeight: '800',
    marginTop: -1,
  },
  logoutAction: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 8,
    borderWidth: 1.5,
    borderColor: '#9E9E9E',
  },
  logoutEmoji: {
    color: '#9E9E9E',
    fontSize: 18,
    fontWeight: '800',
    marginTop: -1,
  },
  logoutLabel: {
    color: '#333',
    fontSize: 16,
    fontWeight: '700',
  },
  testButton: {
    backgroundColor: '#2196F3',
  },

  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },

  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 15,
  },

  bottomButtons: {
    flexDirection: 'column',
    gap: 10,
  },
  endpointToggleSection: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    marginBottom: 20,
  },
  endpointToggleButton: {
    backgroundColor: '#2196F3',
    marginBottom: 10,
  },
  endpointDescription: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  banner: {
    backgroundColor: '#FFF7E6',
    borderColor: '#FFC107',
    borderWidth: 1,
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
  },
  bannerText: {
    color: '#7A5D00',
    marginBottom: 8,
    textAlign: 'center',
    fontSize: 14,
    fontWeight: '600'
  },
  bannerButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    gap: 8,
  },
  testButton: {
    backgroundColor: '#FF9800',
  },
  testButtonActive: {
    backgroundColor: '#4CAF50',
  },
  topBar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: 76,
    paddingBottom: 12,
    paddingHorizontal: 8,
  },
  logoutAction: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  logoutEmoji: {
    fontSize: 24,
    color: '#9E9E9E',
  },
  logoutLabel: {
    fontSize: 16,
    color: '#9E9E9E',
  },

});

export default MainScreen;