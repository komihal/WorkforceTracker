def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

platform :ios, min_ios_version_supported
prepare_react_native_project!

setup_permissions([
  'LocationAlways',
  'LocationWhenInUse',
])

target 'WorkforceTracker' do
  config = use_native_modules!

  use_react_native!(
    new_arch_enabled: false
  )

  post_install do |installer|
    react_native_post_install(installer)

    # helper для вычищения флага
    def strip_flag(val, flag)
      return val if val.nil?
      arr = val.is_a?(Array) ? val : val.to_s.split(' ')
      (arr - [flag]).uniq
    end

    # 1) Чиним все Pods-таргеты
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |bc|
        bc.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        bc.build_settings['DEFINES_MODULE'] = 'NO'
        bc.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        bc.build_settings['CLANG_ENABLE_EXPLICIT_MODULES'] = 'NO'
        bc.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
        bc.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'

        # Отключаем проблемные флаги для всех таргетов
        %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS].each do |key|
          bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=return-type')
          bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=deprecated-objc-isa-usage')
          bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=objc-root-class')
          bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=implicit-function-declaration')
          bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=shorten-64-to-32')
        end

        # (Не обязательно, но полезно)
        if bc.name == 'Debug'
          bc.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        end
      end
    end

    # 2) Патчим и твой app-таргет (это важно для "non-modular..." в самом приложении)
    installer.aggregate_targets.each do |agg|
      agg.user_targets.each do |ut|
        ut.build_configurations.each do |bc|
          bc.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
          bc.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
          bc.build_settings['CLANG_ENABLE_EXPLICIT_MODULES'] = 'NO'
          bc.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
          # Отключаем дополнительные проблемные флаги
          %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS].each do |key|
            bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=return-type')
            bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=deprecated-objc-isa-usage')
            bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=objc-root-class')
            bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=implicit-function-declaration')
            bc.build_settings[key] = strip_flag(bc.build_settings[key], '-Werror=shorten-64-to-32')
          end
        end
      end
    end


    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |bc|
        if bc.name == 'Release'
          bc.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
          bc.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'YES'
        end
      end
    end
  
    # (не обязательно) dSYM и для твоего app-таргета на случай переопределений
    installer.aggregate_targets.each do |agg|
      agg.user_targets.each do |ut|
        ut.build_configurations.each do |bc|
          if bc.name == 'Release'
            bc.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
            bc.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'YES'
          end
        end
      end
    end
  end
end